#!/bin/bash

# This is a test script for the new --enable-fast configure script option.
# The flags that work well together and/or turned out to be useful here, will eventually
# be added to configure.ac's --enable-fast section.

# All types of optimization interfere with debugging.
# You can't have it all!
disable debugging alltogether!!
set -o nounset
set -o xtrace

mkdir -p ../prebuilt.w32

CFLAGS="-g0 -Ofast -Wall -Wextra -Wdisabled-optimization -Wunsafe-loop-optimizations -Wno-aggressive-loop-optimizations -Wnull-dereference -funsafe-loop-optimizations -funsafe-math-optimizations -fgcse-sm -fgcse-las" ./configure --with-pic

make LDFLAGS="-Wl,--strip-all -Wl,--relax -Wl,--warn-common"


       # -Ofast
# Disregard strict standards compliance.  -Ofast enables all -O3 optimizations:

# -fauto-inc-dec -fbranch-count-reg -fcombine-stack-adjustments -fcompare-elim -fcprop-registers
# -fdce -fdefer-pop -fdelayed-branch -fdse -fforward-propagate -fguess-branch-probability
# -fif-conversion2 -fif-conversion -finline-functions-called-once -fipa-pure-const -fipa-profile
# -fipa-reference -fmerge-constants -fmove-loop-invariants -freorder-blocks -fshrink-wrap
# -fsplit-wide-types -fssa-backprop -fssa-phiopt -ftree-bit-ccp -ftree-ccp -ftree-ch
# -ftree-coalesce-vars -ftree-copy-prop -ftree-dce -ftree-dominator-opts -ftree-dse
# -ftree-forwprop -ftree-fre -ftree-phiprop -ftree-sink -ftree-slsr -ftree-sra -ftree-pta
# -ftree-ter -funit-at-a-time

# -fthread-jumps -falign-functions  -falign-jumps -falign-loops -falign-labels -fcaller-saves
# -fcrossjumping -fcse-follow-jumps  -fcse-skip-blocks -fdelete-null-pointer-checks -fdevirtualize
# -fdevirtualize-speculatively -fexpensive-optimizations -fgcse  -fgcse-lm -fhoist-adjacent-loads
# -finline-small-functions -findirect-inlining -fipa-cp -fipa-cp-alignment -fipa-sra -fipa-icf
# -fisolate-erroneous-paths-dereference -flra-remat -foptimize-sibling-calls -foptimize-strlen
# -fpartial-inlining -fpeephole2 -freorder-blocks-algorithm=stc -freorder-blocks-and-partition
# -freorder-functions -frerun-cse-after-loop -fsched-interblock  -fsched-spec -fschedule-insns
# -fschedule-insns2 -fstrict-aliasing -fstrict-overflow -ftree-builtin-call-dce
# -ftree-switch-conversion -ftree-tail-merge -ftree-pre -ftree-vrp -fipa-ra

# -finline-functions, -funswitch-loops, -fpredictive-commoning, -fgcse-after-reload,
# -ftree-loop-vectorize, -ftree-loop-distribute-patterns, -fsplit-paths -ftree-slp-vectorize,
# -fvect-cost-model, -ftree-partial-pre and -fipa-cp-clone

# Please note the warning under -fgcse about invoking -O2 on programs that use computed gotos.
# also turns on -fomit-frame-pointer on machines where doing so does not interfere with
# debugging.

# -Ofast also enables optimizations that are not valid for all standard-compliant programs.
# It turns on -ffast-math and the Fortran-specific -fno-protect-parens and -fstack-arrays.

# Options of the form -fflag specify machine-independent flags.  Most flags have both positive and
# negative forms; the negative form of -ffoo is -fno-foo.  In the table below, only one of the forms
# is listed---the one you typically use.  You can figure out the other form by either removing no- or
# adding it.

       # -Wdisabled-optimization
# Warn if a requested optimization pass is disabled.  This warning does not generally indicate
# that there is anything wrong with your code; it merely indicates that GCC's optimizers are
# unable to handle the code effectively.  Often, the problem is that your code is too big or too
# complex; GCC refuses to optimize programs when the optimization itself is likely to take
# inordinate amounts of time.

       # -Wunsafe-loop-optimizations
# Warn if the loop cannot be optimized because the compiler cannot assume anything on the bounds
# of the loop indices.  With -funsafe-loop-optimizations warn if the compiler makes such
# assumptions.

       # -funsafe-loop-optimizations
# This option tells the loop optimizer to assume that loop indices do not overflow, and that loops
# with nontrivial exit condition are not infinite.  This enables a wider range of loop
# optimizations even if the loop optimizer itself cannot prove that these assumptions are valid.
# If you use -Wunsafe-loop-optimizations, the compiler warns you if it finds this kind of loop.

       # -Wno-aggressive-loop-optimizations
# Warn if in a loop with constant number of iterations the compiler detects undefined behavior in
# some statement during one or more of the iterations.